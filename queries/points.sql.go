// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: points.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreatePointsParams struct {
	Geom               interface{}
	Visited            pgtype.Timestamptz
	DataSourceFilepath string
}

const getDataSourcePointsCount = `-- name: GetDataSourcePointsCount :one
select count(*)
from get_points(arg_data_source_filepath := $1)
`

func (q *Queries) GetDataSourcePointsCount(ctx context.Context, dataSourceFilepath string) (int64, error) {
	row := q.db.QueryRow(ctx, getDataSourcePointsCount, dataSourceFilepath)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getGeoJson = `-- name: GetGeoJson :one
with lines as (
        select 
                st_simplify(
                        st_makeline(geom::geometry order by visited asc),
                        0.01
                ) l
        from points p
        join data_sources ds on p.data_source_filepath = ds.filepath
        group by filepath
) select 
        st_asgeojson(
                st_union(l)   
        )::text geojson
from lines
`

func (q *Queries) GetGeoJson(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getGeoJson)
	var geojson string
	err := row.Scan(&geojson)
	return geojson, err
}

const getLineStrings = `-- name: GetLineStrings :many
select
    st_asgeojson(
        st_makeline(geom::geometry)
    )::text lines
from get_points(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
group by filepath::text
`

type GetLineStringsParams struct {
	VisitedBefore      pgtype.Timestamptz
	VisitedAfter       pgtype.Timestamptz
	DataSourceFilepath pgtype.Text
	DataSourceType     pgtype.Text
	WithinMeters       pgtype.Float8
	WithinMetersLongX  pgtype.Float8
	WithinMetersLatY   pgtype.Float8
}

func (q *Queries) GetLineStrings(ctx context.Context, arg GetLineStringsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getLineStrings,
		arg.VisitedBefore,
		arg.VisitedAfter,
		arg.DataSourceFilepath,
		arg.DataSourceType,
		arg.WithinMeters,
		arg.WithinMetersLongX,
		arg.WithinMetersLatY,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var lines string
		if err := rows.Scan(&lines); err != nil {
			return nil, err
		}
		items = append(items, lines)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
